---

# Use custom module, latest, module when running older (<2.5) ansible
- name: AWS | PEER create using adapted module
  local_ec2_vpc_peer:
    region: "{{ item_peer.region |d(item_vpc.region) }}"
    vpc_id: "{{ vpc_id }}"
    peer_owner_id: "{{ item_peer.peer_owner_id |d(omit) }}"
    peer_vpc_id: "{{ item_peer.peer_vpc_id }}"
    peer_region: "{{ item_peer.peer_region |d(omit) }}"
    state: present
    tags: "{{ item_peer.tags }}"
  register: ret_vpc_peer
  when: "ansible_version.full | version_compare('2.5', '<')"

- name: AWS | PEER create
  ec2_vpc_peer:
    region: "{{ item_peer.region |d(item_vpc.region) }}"
    vpc_id: "{{ vpc_id }}"
    peer_owner_id: "{{ item_peer.peer_owner_id |d(omit) }}"
    peer_vpc_id: "{{ item_peer.peer_vpc_id }}"
    peer_region: "{{ item_peer.peer_region |d(omit) }}"
    state: present
    tags: "{{ item_peer.tags }}"
  register: ret_vpc_peer
  when: "ansible_version.full | version_compare('2.5', '>=')"

- block:
  - name: AWS | PEER retrieve peerings
    local_ec2_vpc_peering_facts:
      filters:
        "tag:Name": "{{ item_peer.tags.Name }}"
    register: ret_vpc_peer

  - name: AWS | PEER filter by non deleted peers
    set_fact:
      ret_vpc_peer: "{{ item }}"
    when: (ret_vpc_peer.result is defined) and item.status.code != "deleted"
    with_items: "{{ ret_vpc_peer.result }}"
  when: "ansible_version.full | version_compare('2.4', '<')"

- debug: var=ret_vpc_peer

- name: AWS | PEER save facts
  set_fact:
    vpc_peers: "{{ vpc_peers + [{'name':item_peer.tags.Name,'id':ret_vpc_peer.vpc_peering_connection_id}] }}"

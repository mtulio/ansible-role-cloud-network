---
- name: AWS | NAT GW | discovery subnet
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ item_vpc.region }}"
    filters:
      "tag:Name": "{{ natgw.subnet }}"
  register: ret_natgw_net

- name: AWS | NAT | Show
  ansible.builtin.debug:
    var: ret_natgw_net
  when: debug|d(false)

- name: AWS | NAT GW | Check subnets
  ansible.builtin.fail:
    msg: "AWS | NAT GW failed: no subnets named {{ natgw.subnet }}"
  when: ret_natgw_net.subnets | length < 1

- name: AWS | NAT GW | Create
  amazon.aws.ec2_vpc_nat_gateway:
    state: present
    region: "{{ item_vpc.region }}"
    subnet_id: "{{ ret_natgw_net.subnets[0].id }}"
    if_exist_do_not_create: "{{ natgw.ignore_exists | d(true) }}"
    wait: "{{ natgw.wait | d(true) }}"
    tags: "{{ natgw.tags | d({}) | combine({'Name': natgw.name}) }}"
  register: ret_natgw
  until: "ret_natgw is not failed"
  retries: 5
  delay: 3

- name: AWS | NAT GW | Save state
  ansible.builtin.set_fact:
    vpc_natgw: "{{ ret_natgw.nat_gateway_id }}"
    gateways: "{{ gateways | combine({'natgw': gateways.natgw \
          | combine({natgw.name: ret_natgw.nat_gateway_id})})
      }}"
    cloud_network_state: "{{ cloud_network_state
        | combine({'natgw': ret_natgw.nat_gateway_id})
      }}"
